#version 330 core
layout (location = 0) in vec3 position;
layout (location = 1) in vec3 normal;
layout (location = 2) in vec2 texCoords;
layout (location = 3) in vec3 color;

uniform mat4 transform;
uniform mat4 view;
uniform mat4 projection;
uniform mat4 model;

out vec3 objectColor;
out vec2 TexCoord; 
out vec3 Normal;
out vec3 fragPos;
 
void main()
{   
    gl_Position = projection * view * model *  vec4(position, 1.0f);
    TexCoord = vec2(texCoords.x, 1.0 - texCoords.y);
	fragPos = vec3(model * vec4(position, 1.0f));
    objectColor = color;
	//normal matrix should be calculated on CPU to increase performance
	Normal = mat3(transpose(inverse(model))) * normal;
}